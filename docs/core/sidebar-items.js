initSidebarItems({"macro":[["Clone","Derive macro generating an impl of the trait `Clone`."],["Copy","Derive macro generating an impl of the trait `Copy`."],["Debug","Derive macro generating an impl of the trait `Debug`."],["Default","Derive macro generating an impl of the trait `Default`."],["Eq","Derive macro generating an impl of the trait `Eq`."],["Hash","Derive macro generating an impl of the trait `Hash`."],["Ord","Derive macro generating an impl of the trait `Ord`."],["PartialEq","Derive macro generating an impl of the trait `PartialEq`."],["PartialOrd","Derive macro generating an impl of the trait `PartialOrd`."],["RustcDecodable","Unstable implementation detail of the `rustc` compiler, do not use."],["RustcEncodable","Unstable implementation detail of the `rustc` compiler, do not use."],["asm","Inline assembly."],["assert","Asserts that a boolean expression is `true` at runtime."],["assert_eq","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["assert_ne","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["bench","Attribute macro applied to a function to turn it into a benchmark test."],["cfg","Evaluates boolean combinations of configuration flags at compile-time."],["column","Expands to the column number at which it was invoked."],["compile_error","Causes compilation to fail with the given error message when encountered."],["concat","Concatenates literals into a static string slice."],["concat_idents","Concatenates identifiers into one identifier."],["debug_assert","Asserts that a boolean expression is `true` at runtime."],["debug_assert_eq","Asserts that two expressions are equal to each other."],["debug_assert_ne","Asserts that two expressions are not equal to each other."],["env","Inspects an environment variable at compile time."],["file","Expands to the file name in which it was invoked."],["format_args","Constructs parameters for the other string-formatting macros."],["format_args_nl","Same as `format_args`, but adds a newline in the end."],["global_allocator","Attribute macro applied to a static to register it as a global allocator."],["global_asm","Module-level inline assembly."],["include","Parses a file as an expression or an item according to the context."],["include_bytes","Includes a file as a reference to a byte array."],["include_str","Includes a utf8-encoded file as a string."],["line","Expands to the line number on which it was invoked."],["log_syntax","Prints passed tokens into the standard output."],["module_path","Expands to a string that represents the current module path."],["option_env","Optionally inspects an environment variable at compile time."],["panic","Panics the current thread."],["stringify","Stringifies its arguments."],["test","Attribute macro applied to a function to turn it into a unit test."],["test_case","An implementation detail of the `#[test]` and `#[bench]` macros."],["todo","Indicates unfinished code."],["trace_macros","Enables or disables tracing functionality used for debugging other macros."],["try","Unwraps a result or propagates its error."],["unimplemented","Indicates unfinished code."],["unreachable","Indicates unreachable code."],["write","Writes formatted data into a buffer."],["writeln","Write formatted data into a buffer, with a newline appended."]],"mod":[["alloc","Memory allocation APIs"],["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["arch","SIMD and vendor intrinsics module."],["array","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["ascii","Operations on ASCII strings and characters."],["borrow","A module for working with borrowed data."],["cell","Shareable mutable containers."],["char","A character type."],["clone","The `Clone` trait for types that cannot be 'implicitly copied'."],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["f32","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f64","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["ffi","Utilities related to FFI bindings."],["fmt","Utilities for formatting and printing strings."],["future","Asynchronous values."],["hash","Generic hashing support."],["hint","Hints to compiler that affects how code should be emitted or optimized."],["i128","The 128-bit signed integer type."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["intrinsics","Compiler intrinsics."],["isize","The pointer-sized signed integer type."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["num","Numeric traits and functions for the built-in numeric types."],["ops","Overloadable operators."],["option","Optional values."],["panic","Panic support in the standard library."],["panicking","Panic support for libcore"],["pin","Types that pin data to its location in memory."],["prelude","The libcore prelude"],["ptr","Manually manage memory through raw pointers."],["raw","Contains struct definitions for the layout of compiler built-in types."],["result","Error handling with the `Result` type."],["slice","Slice management and manipulation."],["str","String manipulation."],["sync","Synchronization primitives"],["task","Types and Traits for working with asynchronous tasks."],["time","Temporal quantification."],["u128","The 128-bit unsigned integer type."],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["unicode",""],["usize","The pointer-sized unsigned integer type."]]});